################## Les difficultés techniques rencontrées ########################


_justification du choix de Cyclos : *expertise interne d'APIs+ avancée technologique commune avec le mouvement SOL (contrairement blockchain)
                                    *comment réaliser des tests avec une blockchain, étant donné que les transactions sont signées avec des hash
                                    *possibilité d'avoir plusieurs réseaux, les "network". A l'avenir, on pourrait imaginer que chaque monnaie locale ait son propre réseau sur la plateforme, étant donné que Cyclos permet la communication inter-networks : possibilité de partenariat avec d  


_les tests:
    *tests fonctionnels
    *tests de performance
    *tests d'intrusion
    *tests utilisateur (UX)



_fermeture de compte : le compte ne peut plus être supprimé à partir du moment ou la moindre opération a eu lieu. En revanche, on peut dissocier un groupe d'utilisateurs d'un produit, et donc d'un compte, de sorte à le rendre invisible des utilisateurs. 

_difficulté technique rencontrée : connaître sa limite dans le travail de vues sachant qu'on ne me demande pas de le faire mais que j'en ai un minimum besoin
_difficulté rencontrée : quand on prend des libertés avec le cahier des charges/perimètre fonctionnel, comment et par qui faire valider cette liberté ?

_difficulté technique rencontrée : gestion de la structure transaction / transfert
    _une transaction est différente d un transfert :
        *transaction : paiement simple / paiement programmé / paiement récurrent
        *transfert : réalisation effective d'un échange entre deux comptes
    _l'attribut qui permet d'identifier uniquement un objet est son id. Pour identifier un transfert, 2 possibilités :
        *L'ID 
        *le numéro de transfert
    _pour identifier une transaction : 2 possibilités :
        *l'ID
        *le numéro de transaction
    Pour un paiement simple, le numéro de transaction et le numéro du transfert associé correspondent. Pour un paiement programmé, 3 options :
        *le paiement a eu lieu : le transfert(et donc son numéro) existe
        *le paiement est programmé : le transfert n'existe pas
        *le paiement a échoué : dans ce cas, le transfert n'existe pas
        
    Idem pour un paiement récurrent. Seulement lui possède ce qu'on appelle des "occurrences" qui ont leurs propres attributs

    Bref, dans chacun des cas, la donnée qui identifie le transfert (pour télécharger la notice par exemple) est différente, et existe ou pas selon le statut de la transaction associée. Cela rend difficile l'automatisation de la récupération du transfert. Problème d'interaction avec Cyclos donc.

_difficulté technique rencontrée : automatisation du script de création de config
_difficulté technique rencontrée : la génération automatique d'un type de compte fonctionnelle etant donné la conifguration
_difficulté technique rencontrée : imaginer l'intégration du code HelloAsso pour les virements bancaires au code de paiements côté cyclos
        

_mettre des mots-clé : espace membre / compte / type de compte ?

_schemaq : ne pas oubier de légender
        _tout mettre en gras
        _Notion de propriétaire et d'inverse : L'entité propriétaire est celle qui contient la référence à l'autre entité
    _lazy-loading : l'entité récupérée ne contient pas les attributs "entités" car trop lourd. Il faut soit refaire une requête pour récupérérer un attribut entité, ou mieux : faire un join entre tables lors de la première requête
    _les relations entre entités
    *OneToOne
    *ManyToMany
    *ManyToOne

_mettre une bibliographie : symfony doc + api / cyclos-reference + cyclos-doc + cyclos-admin / mutualisation des technos / sécurité ? / doc monnaies locales / doc ACPR 
_prise de recul sur le travail : savoir faire des compromis entre les spécifications et une réalisation "idéale". Discuter pour savoir si ce compromis convient au client dans un premier temps

_definir RPC, REST, HTTP ...

